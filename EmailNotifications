pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                // Tool: Maven
                echo 'Building the code using Maven...'
            }
        }

        stage('Unit and Integration Tests') {
            steps {
                script {
                    try {
                        // Tool: JUnit for unit tests, TestNG for integration tests
                        echo 'Running unit tests using JUnit...'
                        // Simulating unit tests
                        sleep(1)

                        echo 'Running integration tests using TestNG...'
                        // Simulating integration tests
                        sleep(1)

                        // Write test logs to file
                        writeFile file: 'test-results.log', text: 'Unit and integration test logs here...\nTest execution completed successfully.'

                        // Notify success
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception e) {
                        // Write failure logs to file
                        writeFile file: 'test-results.log', text: "Test execution failed with error: ${e.getMessage()}"
                        // Notify failure
                        currentBuild.result = 'FAILURE'
                        error("Tests failed: ${e.getMessage()}")
                    } finally {
                        // Archive logs for email
                        archiveArtifacts artifacts: '**/*.log'

                        // Send email notification with attachment
                        emailext(
                            to: 'situ.xiaolin667@gmail.com',
                            subject: "Unit and Integration Tests - ${currentBuild.result}",
                            body: "The unit and integration tests have finished with status: ${currentBuild.result}.\n\nPlease see the attached log file for details.",
                            attachmentsPattern: '**/*.log'
                        )
                    }
                }
            }
        }

        stage('Code Analysis') {
            steps {
                // Tool: SonarQube
                echo 'Analyzing code with SonarQube...'
            }
        }

        stage('Security Scan') {
            steps {
                script {
                    try {
                        // Tool: OWASP ZAP
                        echo 'Performing security scan using OWASP ZAP...'
                        // Simulating a security scan
                        sleep(1)
                        writeFile file: 'security-scan.log', text: 'Security scan logs here...\nVulnerabilities found: 0\nScan completed successfully.'

                        // Notify success
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception e) {
                        // Write failure logs to file
                        writeFile file: 'security-scan.log', text: "Security scan failed with error: ${e.getMessage()}"
                        // Notify failure
                        currentBuild.result = 'FAILURE'
                        error("Security scan failed: ${e.getMessage()}")
                    } finally {
                        // Archive logs for email
                        archiveArtifacts artifacts: '**/*.log'

                        // Send email notification with attachment
                        emailext(
                            to: 'situ.xiaolin667@gmail.com',
                            subject: "Security Scan - ${currentBuild.result}",
                            body: "The security scan has finished with status: ${currentBuild.result}.\n\nPlease see the attached log file for details.",
                            attachmentsPattern: '**/*.log'
                        )
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                // Tool: AWS CLI for deployment
                echo 'Deploying to staging server on AWS EC2...'
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                // Tool: Selenium for integration testing
                echo 'Running integration tests on the staging environment using Selenium...'
            }
        }

        stage('Deploy to Production') {
            steps {
                // Tool: AWS CLI for production deployment
                echo 'Deploying to production server on AWS EC2...'
            }
        }
    }
}
